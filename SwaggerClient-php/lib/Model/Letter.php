<?php
/**
 * Letter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PostByte API Docs
 *
 * # Introduction This is the PostByte API documentation. The PostByte API integrates with  PostByte, a service which can be used to create groups of letters called mailings. The API user can then review these mailings and then use PostByte  to send all the letters in the mailing by post.  The API has been designed to make it easy to integrate with a system that is using asynchronous processing to add the letters. For example the [/mailings/{mailing_id}/letters](/#operation/addLetter) resource is idempotent, so re-tries are safe and it's impossible for duplicate letters to be sent.  There are two main resources:    | Resource | Description                                                                         |   | -------- | ----------------------------------------------------------------------------------- |   | Mailing  | the mailing resource allows you to track the status of a group of letters           |   | Letters  | these are the actual letters and addresses information for each letter in a mailing |  **To Send a Mailing** 1. First you must create a mailing record by performing a POST request to [/mailings](/#operation/createMailing). You will specify in this request the number of letters that are to be sent in this mailing. This will return JSON containing a `mailing_id`. 2. Now you must add letters to the mailing. You do this by performing multiple POST requests to [/mailings/{mailing_id}/letters](/#operation/addLetter). Both the PDF file (base64 encoded) and the recipient information is supplied in these requests. 3. Once the correct number of letters have been added to the mailing the status of the mailing will change from `Awaiting Letters` to `Awaiting Confirmation`. 4. You must now submit a request to [/mailings/{mailing_id}/confirm](/#operation/confirmMailing) and if you have added the number of mailings that you specified when you created the initial mailing record then the status will change from `Awaiting Confirmation` to `Ready to Send`. The mailing will then be visible in the user's PostByte portal and they will receive an email notification telling them they have a mailing ready for review and sending. 4. Once the user has reviewed the mailing and confirmed that they want to send it, then the mailing will go into a status of 'Pending Printing' for 3 hours. While in this state the mailing can still be cancelled, either through the users portal, or by performing a post request to [/mailings/{mailing_id}/cancel](/#operation/cancelMailing).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@gigabyte.software
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Letter Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Letter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Letter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recipient_name' => 'string',
'address_line_1' => 'string',
'address_line_2' => 'string',
'address_line_3' => 'string',
'address_line_4' => 'string',
'county' => 'string',
'postcode' => 'string',
'country' => 'string',
'pdf_file' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recipient_name' => null,
'address_line_1' => null,
'address_line_2' => null,
'address_line_3' => null,
'address_line_4' => null,
'county' => null,
'postcode' => null,
'country' => null,
'pdf_file' => 'date'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipient_name' => 'recipient_name',
'address_line_1' => 'address_line_1',
'address_line_2' => 'address_line_2',
'address_line_3' => 'address_line_3',
'address_line_4' => 'address_line_4',
'county' => 'county',
'postcode' => 'postcode',
'country' => 'country',
'pdf_file' => 'pdf_file'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recipient_name' => 'setRecipientName',
'address_line_1' => 'setAddressLine1',
'address_line_2' => 'setAddressLine2',
'address_line_3' => 'setAddressLine3',
'address_line_4' => 'setAddressLine4',
'county' => 'setCounty',
'postcode' => 'setPostcode',
'country' => 'setCountry',
'pdf_file' => 'setPdfFile'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recipient_name' => 'getRecipientName',
'address_line_1' => 'getAddressLine1',
'address_line_2' => 'getAddressLine2',
'address_line_3' => 'getAddressLine3',
'address_line_4' => 'getAddressLine4',
'county' => 'getCounty',
'postcode' => 'getPostcode',
'country' => 'getCountry',
'pdf_file' => 'getPdfFile'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipient_name'] = isset($data['recipient_name']) ? $data['recipient_name'] : null;
        $this->container['address_line_1'] = isset($data['address_line_1']) ? $data['address_line_1'] : null;
        $this->container['address_line_2'] = isset($data['address_line_2']) ? $data['address_line_2'] : null;
        $this->container['address_line_3'] = isset($data['address_line_3']) ? $data['address_line_3'] : null;
        $this->container['address_line_4'] = isset($data['address_line_4']) ? $data['address_line_4'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['pdf_file'] = isset($data['pdf_file']) ? $data['pdf_file'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address_line_1'] === null) {
            $invalidProperties[] = "'address_line_1' can't be null";
        }
        if ($this->container['postcode'] === null) {
            $invalidProperties[] = "'postcode' can't be null";
        }
        if ($this->container['pdf_file'] === null) {
            $invalidProperties[] = "'pdf_file' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recipient_name
     *
     * @return string
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string $recipient_name The name of person(s) that the letter is being sent to, this will appear on the outside of the envelope
     *
     * @return $this
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets address_line_1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line_1'];
    }

    /**
     * Sets address_line_1
     *
     * @param string $address_line_1 First line of the addresss
     *
     * @return $this
     */
    public function setAddressLine1($address_line_1)
    {
        $this->container['address_line_1'] = $address_line_1;

        return $this;
    }

    /**
     * Gets address_line_2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line_2'];
    }

    /**
     * Sets address_line_2
     *
     * @param string $address_line_2 Second line of the addresss
     *
     * @return $this
     */
    public function setAddressLine2($address_line_2)
    {
        $this->container['address_line_2'] = $address_line_2;

        return $this;
    }

    /**
     * Gets address_line_3
     *
     * @return string
     */
    public function getAddressLine3()
    {
        return $this->container['address_line_3'];
    }

    /**
     * Sets address_line_3
     *
     * @param string $address_line_3 Third line of the addresss
     *
     * @return $this
     */
    public function setAddressLine3($address_line_3)
    {
        $this->container['address_line_3'] = $address_line_3;

        return $this;
    }

    /**
     * Gets address_line_4
     *
     * @return string
     */
    public function getAddressLine4()
    {
        return $this->container['address_line_4'];
    }

    /**
     * Sets address_line_4
     *
     * @param string $address_line_4 Fourth line of the addresss
     *
     * @return $this
     */
    public function setAddressLine4($address_line_4)
    {
        $this->container['address_line_4'] = $address_line_4;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county County
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode Postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets pdf_file
     *
     * @return \DateTime
     */
    public function getPdfFile()
    {
        return $this->container['pdf_file'];
    }

    /**
     * Sets pdf_file
     *
     * @param \DateTime $pdf_file Base64 encoded PDF file contents of the letter to be sent
     *
     * @return $this
     */
    public function setPdfFile($pdf_file)
    {
        $this->container['pdf_file'] = $pdf_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
