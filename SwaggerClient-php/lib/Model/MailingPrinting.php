<?php
/**
 * MailingPrinting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PostByte API Docs
 *
 * # Introduction This is the PostByte API documentation. The PostByte API integrates with  PostByte, a service which can be used to create groups of letters called mailings. The API user can then review these mailings and then use PostByte  to send all the letters in the mailing by post.  The API has been designed to make it easy to integrate with a system that is using asynchronous processing to add the letters. For example the [/mailings/{mailing_id}/letters](/#operation/addLetter) resource is idempotent, so re-tries are safe and it's impossible for duplicate letters to be sent.  There are two main resources:    | Resource | Description                                                                         |   | -------- | ----------------------------------------------------------------------------------- |   | Mailing  | the mailing resource allows you to track the status of a group of letters           |   | Letters  | these are the actual letters and addresses information for each letter in a mailing |  **To Send a Mailing** 1. First you must create a mailing record by performing a POST request to [/mailings](/#operation/createMailing). You will specify in this request the number of letters that are to be sent in this mailing. This will return JSON containing a `mailing_id`. 2. Now you must add letters to the mailing. You do this by performing multiple POST requests to [/mailings/{mailing_id}/letters](/#operation/addLetter). Both the PDF file (base64 encoded) and the recipient information is supplied in these requests. 3. Once the correct number of letters have been added to the mailing the status of the mailing will change from `Awaiting Letters` to `Awaiting Confirmation`. 4. You must now submit a request to [/mailings/{mailing_id}/confirm](/#operation/confirmMailing) and if you have added the number of mailings that you specified when you created the initial mailing record then the status will change from `Awaiting Confirmation` to `Ready to Send`. The mailing will then be visible in the user's PostByte portal and they will receive an email notification telling them they have a mailing ready for review and sending. 4. Once the user has reviewed the mailing and confirmed that they want to send it, then the mailing will go into a status of 'Pending Printing' for 3 hours. While in this state the mailing can still be cancelled, either through the users portal, or by performing a post request to [/mailings/{mailing_id}/cancel](/#operation/cancelMailing).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@gigabyte.software
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MailingPrinting Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailingPrinting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MailingPrinting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mailing_id' => 'string',
'block' => 'string',
'expected_letters' => 'float',
'letters_received' => 'float',
'status' => 'string',
'date_created' => '\DateTime',
'date_sent' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mailing_id' => 'uuid',
'block' => null,
'expected_letters' => null,
'letters_received' => null,
'status' => null,
'date_created' => 'date',
'date_sent' => 'date'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mailing_id' => 'mailing_id',
'block' => 'block',
'expected_letters' => 'expected_letters',
'letters_received' => 'letters_received',
'status' => 'status',
'date_created' => 'date_created',
'date_sent' => 'date_sent'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mailing_id' => 'setMailingId',
'block' => 'setBlock',
'expected_letters' => 'setExpectedLetters',
'letters_received' => 'setLettersReceived',
'status' => 'setStatus',
'date_created' => 'setDateCreated',
'date_sent' => 'setDateSent'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mailing_id' => 'getMailingId',
'block' => 'getBlock',
'expected_letters' => 'getExpectedLetters',
'letters_received' => 'getLettersReceived',
'status' => 'getStatus',
'date_created' => 'getDateCreated',
'date_sent' => 'getDateSent'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mailing_id'] = isset($data['mailing_id']) ? $data['mailing_id'] : null;
        $this->container['block'] = isset($data['block']) ? $data['block'] : null;
        $this->container['expected_letters'] = isset($data['expected_letters']) ? $data['expected_letters'] : null;
        $this->container['letters_received'] = isset($data['letters_received']) ? $data['letters_received'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_sent'] = isset($data['date_sent']) ? $data['date_sent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mailing_id
     *
     * @return string
     */
    public function getMailingId()
    {
        return $this->container['mailing_id'];
    }

    /**
     * Sets mailing_id
     *
     * @param string $mailing_id Unqiue identifier for the mailing that has been created, used in
     *
     * @return $this
     */
    public function setMailingId($mailing_id)
    {
        $this->container['mailing_id'] = $mailing_id;

        return $this;
    }

    /**
     * Gets block
     *
     * @return string
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param string $block The name of the block or development that the mailing is for
     *
     * @return $this
     */
    public function setBlock($block)
    {
        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets expected_letters
     *
     * @return float
     */
    public function getExpectedLetters()
    {
        return $this->container['expected_letters'];
    }

    /**
     * Sets expected_letters
     *
     * @param float $expected_letters The number of letters specified when the mailing was created
     *
     * @return $this
     */
    public function setExpectedLetters($expected_letters)
    {
        $this->container['expected_letters'] = $expected_letters;

        return $this;
    }

    /**
     * Gets letters_received
     *
     * @return float
     */
    public function getLettersReceived()
    {
        return $this->container['letters_received'];
    }

    /**
     * Sets letters_received
     *
     * @param float $letters_received The number of letters successfully received via [/mailings/{mailing_id}/letters](/#operation/addLetter)
     *
     * @return $this
     */
    public function setLettersReceived($letters_received)
    {
        $this->container['letters_received'] = $letters_received;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the mailing
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created Date the mailing was created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_sent
     *
     * @return \DateTime
     */
    public function getDateSent()
    {
        return $this->container['date_sent'];
    }

    /**
     * Sets date_sent
     *
     * @param \DateTime $date_sent Date the mailing was sent
     *
     * @return $this
     */
    public function setDateSent($date_sent)
    {
        $this->container['date_sent'] = $date_sent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
